[gd_scene load_steps=3 format=3 uid="uid://bm2tpd5x76ox4"]

[ext_resource type="Script" uid="uid://bp117jqlwtxer" path="res://node_3d.gd" id="1_a202f"]

[sub_resource type="GDScript" id="GDScript_a202f"]
script/source = "extends XROrigin3D

func _ready():
	for hand in [\"left\", \"right\"]:
		# Create hand tracker
		var hand_tracker = XRNode3D.new()
		hand_tracker.name = hand.capitalize() + \"HandTracker\"
		hand_tracker.tracker = \"/user/hand_tracker/\" + hand
		hand_tracker.show_when_tracked = true
		add_child(hand_tracker)
		
		var hand_mesh = OpenXRFbHandTrackingMesh.new()
		hand_mesh.name = \"OpenXRFbHandTrackingMesh\"
		hand_mesh.hand = 0 if hand == \"left\" else 1
		hand_tracker.add_child(hand_mesh)
		
		var hand_modifier = XRHandModifier3D.new()
		hand_modifier.hand_tracker = \"/user/hand_tracker/\" + hand
		hand_mesh.add_child(hand_modifier)
		
		# Create capsule collision bodies
	print(\"=== Inspecting OpenXRFbHandTrackingCapsulesExtensionWrapper ===\")
	
	# Check if it exists as a singleton
	if Engine.has_singleton(\"OpenXRFbHandTrackingCapsulesExtensionWrapper\"):
		print(\"Found as Engine singleton!\")
		var capsules_extension = Engine.get_singleton(\"OpenXRFbHandTrackingCapsulesExtensionWrapper\")
		print(\"Type: \", typeof(capsules_extension))
		print(\"Class: \", capsules_extension.get_class() if capsules_extension else \"null\")
		
		# List all methods
		print(\"\\nAvailable methods:\")
		for method in capsules_extension.get_method_list():
			print(\"  - \", method.name)
		
		# List all properties
		print(\"\\nAvailable properties:\")
		for property in capsules_extension.get_property_list():
			print(\"  - \", property.name, \" (\", property.type, \")\")
	else:
		print(\"Not found as Engine singleton\")
	
	# Try accessing it directly as a class
	print(\"\\n=== Trying direct class access ===\")
	if ClassDB.class_exists(\"OpenXRFbHandTrackingCapsulesExtensionWrapper\"):
		print(\"Class exists in ClassDB\")
		var methods = ClassDB.class_get_method_list(\"OpenXRFbHandTrackingCapsulesExtensionWrapper\", true)
		print(\"Methods:\")
		for method in methods:
			print(\"  - \", method.name)
	else:
		print(\"Class not found in ClassDB\")
"

[node name="Node3D" type="Node3D"]
script = ExtResource("1_a202f")

[node name="XROrigin3D" type="XROrigin3D" parent="."]
script = SubResource("GDScript_a202f")

[node name="XRCamera3D" type="XRCamera3D" parent="XROrigin3D"]
transform = Transform3D(1, 0, 0, 0, 0.953675, 0.30083895, 0, -0.30083895, 0.953675, 0, 0.8028079, 1.258544)
